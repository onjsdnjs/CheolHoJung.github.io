(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{256:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("p",[t._v("대학생 시절에 '추상클래스는 클래스를 추상화하여 구현없는 껍데기를 정의해놓은 클래스이며 인터페이스는 클래스와 달리 인스턴스 변수를 가질 수 없는 즉, 더욱 추상화된 껍데기이며 다중 구현이 가능하다.' 라고 배웠다. 자바의 정석을 읽으면서 더 깊은 내용을 정리해보려고 한다.")]),t._v(" "),a("h2",{attrs:{id:"추상클래스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#추상클래스","aria-hidden":"true"}},[t._v("#")]),t._v(" 추상클래스")]),t._v(" "),a("p",[t._v("추상클래스는 자체적으로 클래스의 역할을 다 하지는 못한다. 새로운 클래스를 작성할 때, 아무것도 없는 상태에서 시작하지 않고 어느 정도 틀을 갖춘 상태를 정의한다. 물론 추상클래스도 일반 클래스와 같이 구현, 생성자, 초기화 블럭의 사용이 가능하다.")]),t._v(" "),a("h3",{attrs:{id:"특징"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#특징","aria-hidden":"true"}},[t._v("#")]),t._v(" 특징")]),t._v(" "),a("ul",[a("li",[t._v("일반클래스의 특징을 갖는다. 즉 상태, 생성자, 초기화 블럭, 구현된 메서드등을 포함할 수 있다.")]),t._v(" "),a("li",[t._v("일반클래스의 특징을 갖기때문에 Object라는 최상위 부모가 존재한다.")]),t._v(" "),a("li",[t._v("다중 상속이 불가능하다.")])]),t._v(" "),a("h3",{attrs:{id:"예시"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#예시","aria-hidden":"true"}},[t._v("#")]),t._v(" 예시")]),t._v(" "),a("p",[t._v("하나의 큰 카테고리에서 하위의 카테고리들의 설계는 60~80%는 비슷할 것이다. 같은 크기의 냉장고, Tv라고 하더라도 여러 종류의 모델이 있지만 냉장고, Tv의 종류가 다르다고해서 전혀 다른 역할은 하지 않기 때문이다.")]),t._v(" "),a("blockquote",[a("p",[t._v("그냥 조상클래스에 빈 메소드를 만들어 놓고 오버라이딩 하면 되지 않나?")])]),t._v(" "),a("p",[t._v("추상클래스는 구현된 메소드와 추상메소드를 모두 정의할 수 있다. 만약 해당 클래스를 추상클래스가 아닌 일반클래스에서 상속한다면 추상메소드는 반드시 오버라이딩해야한다. 반면에, 이미 구현된 메소드의 오버라이딩은 선택사항이다.")]),t._v(" "),a("h2",{attrs:{id:"인터페이스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#인터페이스","aria-hidden":"true"}},[t._v("#")]),t._v(" 인터페이스")]),t._v(" "),a("p",[t._v("인터페이스는 추상클래스와 비슷하다. 추상클래스처럼 추상메소드를 갖지만 추상화의 정도가 보다 높다. 추상화가 더 높기 때문에 추상메소드와 상수를 제외하고는 어떠한 요소도 가질 수 없다(자바8 이전).")]),t._v(" "),a("h3",{attrs:{id:"특징-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#특징-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 특징")]),t._v(" "),a("ul",[a("li",[t._v("Object와 같은 최상위 조상은 없다.")]),t._v(" "),a("li",[t._v("인터페이스도 추상클래스와 마찬가지로 인스턴스의 생성이 불가능하다.")]),t._v(" "),a("li",[t._v("클래스의 경우 여러 개의 인터페이스를 구현할 수 있으며, 인터페이스 간에는 다중 상속이 가능하다.")])]),t._v(" "),a("h3",{attrs:{id:"다형성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#다형성","aria-hidden":"true"}},[t._v("#")]),t._v(" 다형성")]),t._v(" "),a("p",[t._v("스타크래프트에서 테란에는 유닛이 있다. 이 유닛은 다시 지상유닛과 공중유닛으로 구분된다. 지상유닛에는 SCV, 탱크, 마린과 같은 유닛들이 있으며 공중유닛에는 배틀크루저와 같은 유닛들이 있다.")]),t._v(" "),a("ul",[a("li",[t._v("유닛\n"),a("ul",[a("li",[t._v("지상유닛\n"),a("ul",[a("li",[t._v("SCV")]),t._v(" "),a("li",[t._v("탱크")]),t._v(" "),a("li",[t._v("마린")])])]),t._v(" "),a("li",[t._v("공중유닛\n"),a("ul",[a("li",[t._v("배틀크루저")])])])])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GroundUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AirUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SCV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GroundUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tank")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GroundUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Marine")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GroundUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Battle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AirUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("이러한 상황에서 SCV에 기계(SCV, Tank, Battle) 유닛을 수리하는 기능을 추가해보자.")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SCV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GroundUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SCV scv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" scv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tank tank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" tank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Battle battle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" battle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("repair() 메소드는 인자로 넘어온 유닛의 체력을 일부 회복시킨다. 위와 같이 오버로딩을 이용하여 각 유닛마다 메소드를 추가하면 된다. 하지만 이 코드에는 문제가 존재한다. 체력이라는 속성은 Unit에 속해있다. 심지어 각 유닛마다 구현이 다를 필요도 없다. 이는 코드의 중복을 의미한다.")]),t._v(" "),a("p",[t._v("해결방법을 찾아보자.")]),t._v(" "),a("blockquote",[a("p",[t._v("Scv와 Tank는 지상유닛, Battle은 공중 유닛이므로 메소드를 2개로 줄인다.")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GroundUnit groundUnit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("groundUnit "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SCV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" groundUnit "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tank")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        groundUnit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AirUnit airUnit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("airUnit "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Battle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        airUnit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("GroudnUnit 중 SCV와 Tank만 수리가 가능하므로 instanceof 구문을 이용하여 repair() 메소드를 구현했다. 이제 repair() 메소드에 Marine의 인스턴스를 전달하면 IllegalArgumentException가 던져질 것이다. 무사히 해결한 것 같지만, 이 코드 역시 문제점이 존재한다. 게임을 업데이트하면서 기계 유닛이 추가되면 if문에 코드를 추가해야한다.")]),t._v(" "),a("p",[t._v("코드의 변경이나 추가가 없이 해결할 수 있는 방법을 찾아보자.")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repairable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tank")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GroundUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repairable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Battle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GroundUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repairable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scv")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AirUnit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repairable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repair")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Repairable r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tUnit unit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 조상 클래스인 Unit에 정의된 인스턴스 변수를 사용하기 위해 업캐스팅")]),t._v("\n\t\t\tunit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("각각의 클래스는 이미 부모클래스가 있기 때문에 인터페이스를 이용한다. Repairable이라는 인터페이스를 만들어 수리가 가능한 유닛들이 이를 구현하도록 한다.  Repairable이라는 타입으로 수리가 가능한 타입의 객체를 참조할 수 있다. 여러가지 형태를 가질 수 있는 "),a("strong",[t._v("다형성")]),t._v("의  특징을 이용한 것이다.")]),t._v(" "),a("p",[t._v("위 코드에서는 Repairable의 참조 변수로 Scv, Tank, Battle를 사용할 수 있다는 의미다. 이렇게 repair메소드의 인자로 Repairable의 참조변수를 넘겨 받는 이유는 해당 참조변수와 상속관계에 있지 않은 객체가 넘어오면 오류를 내기 위해서다.이제 새로운 유닛을 추가할 때, 해당 유닛이 수리가 가능하게하려면 단순히 Repairable만 구현하도록 하면 되는 것이다.")])])}],!1,null,null,null);e.options.__file="interface-and-abstractclass.md";s.default=e.exports}}]);