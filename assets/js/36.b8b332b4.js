(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{248:function(t,e,a){"use strict";a.r(e);var s=a(1),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("p",[t._v("지난 포스팅에선 의존성을 줄이고 객체들에게 상태의 변화를 알릴 수 있는 옵저버 패턴에 대해 알아보았다. 이번에는 실행중에 클래스를 꾸미거나 기능을 확장할 수 있는 데코레이터 패턴에 대해 복습한다.")]),t._v(" "),t._m(0),t._v(" "),a("p",[t._v("객체에 추가적인 요건을 동적으로 첨가한다. 데코레이터 패턴은 서브클래스를 만드는 것을 통해서 기능을 유연하게 확장할 수 있는 방법을 제공한다.")]),t._v(" "),a("lazy-load",{attrs:{tag:"img",data:{src:"/images/posts/2018/3/데코레이터1.png",alt:"Piece of a Google search page result with the link and a highlight with red borders indicating the URL"}}}),t._v(" "),a("p",[t._v("데코레이터 패턴을 사용하면 원래 클래스의 코드는 전혀 바꾸지 않고도 객체에 새로운 임무를 부여할 수 있다. 클래스 다이어그램을 살펴보면 그 원리를 알 수 있다.")]),t._v(" "),t._m(1),t._v(" "),a("lazy-load",{attrs:{tag:"img",data:{src:"/images/posts/2018/3/데코레이터2.png",alt:"Piece of a Google search page result with the link and a highlight with red borders indicating the URL"}}}),t._v(" "),a("p",[t._v("데코레이터가 감싸는 대상이 될 클래스를 Component라고 한다. 공통적인 부분을 Component 라는 인터페이스로 정의하고 각각 필요한 구현을 한다. 여기까진 일반적인 인터페이스 사용법과 다름이 없다.")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),a("p",[t._v("Decorator는 반드시 대상이 되는 Component를 상속해야한다. 그 이유는 행동 상속하는 것이 아닌 원래 있던 구성요소가 들어갈 자리에 Decorator가 들어가야하기 때문에 Decorator를 Component와 똑같은 타입으로 취급하기 위해서다.")]),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("Decorator의 구상클래스는 반드시 자신이 감싸는 Component를 구성요소로 가져야 한다. 기능을 확장하기 위해서는 Component의 메소드를 한번 호출해야 하기 때문이다. 데코레이터 패턴은 기능을 확장할 때 Component의 원래 메소드를 호출하기 전, 또는 후에 별도의 작업을 처리한다.물론 데코레이터만의 메소드도 가질 수 있다.")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),a("lazy-load",{attrs:{tag:"img",data:{src:"/images/posts/2018/3/데코레이터3.png",alt:"Piece of a Google search page result with the link and a highlight with red borders indicating the URL"}}}),t._v(" "),a("p",[t._v("데코레이터 패턴이 적용된 클래스는 흔히 볼 수 있다. java.io 패키지에 있는 InputStream에 데코레이터 패턴이 사용되었다.")]),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("우리가 자바에서 파일과 관련된 작업을 할때 주로 사용하는 BufferedInputStream등이 구상 데코레이터이다. 성능을 위해 버퍼를 사용하는 BufferedInputStream, 라인넘버를 위해 사용하는 LineNumberInputStream 등 다양한 구상 데코레이터가 제공된다.")]),t._v(" "),a("lazy-load",{attrs:{tag:"img",data:{src:"/images/posts/2018/3/데코레이터4.png",alt:"Piece of a Google search page result with the link and a highlight with red borders indicating the URL"}}}),t._v(" "),a("p",[t._v("자바 API문서를 보면 FilterInputStream가 왜 추상 데코레이터인지 알 수 있다. Component인 InputStream을 상속했으며 구성요소로 InputStream을 갖고 있다.")]),t._v(" "),t._m(12),a("p",[a("a",{attrs:{href:"https://github.com/iluwatar/java-design-patterns/tree/master/decorator",target:"_blank",rel:"noopener noreferrer"}},[t._v("데코레이터 패턴 예제"),a("OutboundLink")],1)])],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"정의"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#정의","aria-hidden":"true"}},[this._v("#")]),this._v(" 정의")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"다이어그램"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#다이어그램","aria-hidden":"true"}},[this._v("#")]),this._v(" 다이어그램")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"데코레이터-패턴과-ocp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#데코레이터-패턴과-ocp","aria-hidden":"true"}},[this._v("#")]),this._v(" 데코레이터 패턴과 OCP")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("클래스는 변경에 대해서는 닫혀있지만 확장에 대해서는 열려있어야 한다.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("앞서 복습한 디자인패턴 원칙에서 **OCP(Open-Closed Principle)**가 등장했었다. 위 다이어그램에서 Component 인터페이스의 methodA()  메소드에 로직을 추가한다고 하자. 메소드에 로직을 추가하려면 기존 코드를 변경하는것 말고는 방법이 없다. 그렇게 되면 이 Component는 변경에 대해서도 열려있는 객체가 되어 OCP 원칙에 어긋난다. "),e("strong",[this._v("객체에 동적으로 추가적인 요소를 가미할 때 하나의 해결책으로 데코레이터 패턴을 사용할 수 있다")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"구현방법"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#구현방법","aria-hidden":"true"}},[this._v("#")]),this._v(" 구현방법")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Component 인터페이스를 감싸기 위한 Decorator 인터페이스를 정의한다.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Decorator 인터페이스를 구현하는 구상클래스를 만든다.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("인터페이스의 상속?")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Decorator가 Component인터페이스를 상속했으므로 "),e("strong",[this._v("상속보다는 구성을 활용하라")]),this._v("는 원칙을 어긴것처럼 보인다. 합성에 관한 원칙은 상속이 코드 중복, 동적 변경 불가, 코드 변경 시의 위험성 등등 때문에 되도록 상속보다는 구성을 이용하라는 것이다. 위에서는 인터페이스가 인터페이스를 상속했는데, Decorator가 Component의 행동이나 상태를 물려받기 위해서 상속하는 것이 아니라 클라이언트나 다른 클래스에서 Component가 들어갈 자리에 Decorator가 들어가기 위해서 사용한다. 책에서는 이를 "),e("strong",[this._v("형식을 맞춘다고")]),this._v(" 표현했다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"예시"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예시","aria-hidden":"true"}},[this._v("#")]),this._v(" 예시")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("InputStream: 대상이 되는 추상 컴포넌트.\n"),e("ul",[e("li",[this._v("InputStream을 구현하는 구상 컴포넌트는 모두 구상 데코레이터으로 감쌀 수 있다.")])])]),this._v(" "),e("li",[this._v("FilterInputStream: InputStream을 감싸는 추상 데코레이터.")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterInputStream")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ....")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .... 초기화작업, try ~ catch 생략")]),t._v("\n        FileInputStream fins "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filePath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 파일 스트림 생성")]),t._v("\n        BufferedInputStream bfins "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 데코레이터로 감싼다.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);n.options.__file="decorator.md";e.default=n.exports}}]);